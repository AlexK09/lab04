CMAKE_MINIMUM_REQUIRED( VERSION 2.8 )
PROJECT( IntroductionToCUDA )

SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )

# CUDA on OS X uses clang as a host compiler
# Set this to OFF on other systems
SET ( USE_CLANG_AS_HOST_COMPILER ON )

INCLUDE( FindCUDA )
FIND_PACKAGE( CUDA REQUIRED )
INCLUDE_DIRECTORIES( ${CUDA_INCLUDE_DIRS} )

MESSAGE( STATUS "CUDA version: ${CUDA_VERSION_STRING}" )
MESSAGE( STATUS "CUDA include dirs: ${CUDA_INCLUDE_DIRS}" )
MESSAGE( STATUS "CUDA rt library: ${CUDA_CUDART_LIBRARY}" )
MESSAGE( STATUS "CUDA nvcc: ${CUDA_NVCC_EXECUTABLE}" )

FIND_PACKAGE( OpenCV REQUIRED )
INCLUDE_DIRECTORIES( ${OpenCV_INCLUDE_DIRS} )

MESSAGE( STATUS "OpenCV version: ${OpenCV_VERSION}" )
MESSAGE( STATUS "OpenCV include dirs: ${OpenCV_INCLUDE_DIRS}" )
MESSAGE( STATUS "OpenCV libs: ${OpenCV_LIBS}" )
MESSAGE( STATUS "OpenCV libs dir: ${OpenCV_LIB_DIR}" )

SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fopenmp")
SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp -std=c++11")

IF ( USE_CLANG_AS_HOST_COMPILER )
    SET( CUDA_HOST_COMPILER "/usr/bin/clang" )
ENDIF ()
SET( CUDA_NVCC_FLAGS "-arch=sm_50" )
SET( CUDA_PROPAGATE_HOST_FLAGS OFF )

MESSAGE( STATUS "Using c compiler at path: ${CMAKE_C_COMPILER}")
MESSAGE( STATUS "Using cxx compiler at path: ${CMAKE_CXX_COMPILER}")

INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR} )
ADD_SUBDIRECTORY( Part2 )
